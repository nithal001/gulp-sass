// Color definitions
$primarycolor: #8dc63f;
$textcolor: #333;
$linkcolor: $textcolor;
$linkhover: $primarycolor;
$footer-text-color: #a7a9ac;
$white: #fff;
$black: #000;
$green: #8fbc5a;
$red: #ff4040;
$blue: #001e80;
$grey: #6D6E71;
$gold: #e7b511;
$orange: #fd8f00;
$em-base: 18;
$horizontal-line-color: #e5ebeb;
$step-number-color: #aeb3b6;
$required-text-color: #767676;
$step-circle-base-color: #e5e7e8;
$step-circle-fill-color: #aeb3b6;
$personal-info-bg: #FBFBFB;
$header-article-color: $step-number-color;
$subsection-title-color: #DDD;
$step-subheader-color: #666;
$msg-bg: #a2a2a2;
$select-option-bg: #f1f2f2;
$label-color: #6E6E6E;
$input-text-bg: #ebecec;
$tooltip-bg: #9C9C9C;
$profilepic-border-color: #d7d7d7;
$time-picker-border: #CCC;
$time-picker-header-bg: #d3d3d3;

$default-font: Arial;

//Font Specifications
$audiowide-regular: 'audiowide-regular-webfont';

@font-face {
  font-family: $audiowide-regular;
  src: url('../fonts/audiowide-regular-webfont.eot');
  src: url('../fonts/audiowide-regular-webfont.woff') format('woff'), url('../fonts/audiowide-regular-webfont.ttf') format('truetype'), url('../fonts/audiowide-regular-webfont.svg') format('svg');
}

//Mixins
// Functions

//Float element left or right

@mixin floatElement($direction) {
  float: $direction;
}
// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)

@function em($pxval, $base: $em-base) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return $pxval / $base * 1em;
}

//Readmore
%readmore {
  font-size: em(16);
  text-transform: uppercase;
  font-family: $audiowide-regular;
}

//Clearfix
%clearfix {
  &:after {
    content: "";    
    display: table;
    clear: both;
  }
}

//wrap text

%textwrap {
    overflow-wrap: break-word;
    word-wrap: break-word;
    -webkit-hyphens: auto;
    -ms-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto;
}

//select bg image
@mixin selectbackground($bgimage: url(../images/sprite.png) no-repeat -405px -435px,$height: 12px,$mrgintop: -4.5px) {
    background: $bgimage;
    content: "";
    height: $height;
    margin-top: $mrgintop;
    position: absolute;
    right: 15px;
    top: 56%;
    width: 18px;
}


// Arrow
@mixin arrow($direction: top, $size: 10px, $color: #ccc, $center: 50%, $margin: -1px, $pseudo: before, $pos: relative) {
  position: $pos;
  border-color: $color;
  &:#{$pseudo} {
    position: absolute;
    content: "";
    width: 0;
    height: 0;
    border-color: $color;
    @if $direction == "right" {
      top: $center;
      left: 100%;
      margin-left: $margin;
      margin-top: $size * -1;
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-left: $size solid $color;
      border-left-color: inherit;
    }
    @else if $direction == "down" {
      top: 100%;
      left: $center;
      margin-top: $margin;
      margin-left: $size * -1;
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-top: $size solid $color;
      border-top-color: inherit;
    }
    @else if $direction == "left" {
      top: $center;
      right: 100%;
      margin-right: $margin;
      margin-top: $size * -1;
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-right: $size solid $color;
      border-right-color: inherit;
    }
    @else {
      bottom: 100%;
      left: $center;
      margin-bottom: $margin;
      margin-left: $size * -1;
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
      border-bottom-color: inherit;
    }
  }
}
// Media queries
$breakpoints: (
  'mq-1200': (max-width: 1200px),
  'mq-1024': (max-width: 1024px),
  'mq-992': (max-width: 992px),
  'mq-768': (max-width: 768px),
  'mq-480': (max-width: 480px),
  'mq-320': (max-width: 320px),
);
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}
